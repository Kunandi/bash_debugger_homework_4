# After each line of the test script is executed the shell traps to this function.  
function _steptrap  
{ 
_curline=$1 # the number of the line that just ran  
(( $_trace )) && _msg "$PS4 line $_curline: ${_lines[$_curline]}“  
if (( $_steps >= 0 )); then
let _steps="$_steps - 1"
fi 
# First check to see if a line number breakpoint was reached. 
# If it was, then enter the debugger.  
if _at_linenumbp ; then 
_msg "Reached breakpoint at line $_curline“  _cmdloop 
# If it wasn't, check whether a break condition exists and is true.  
# If it is, then enter the debugger. 
elif [ -n "$_brcond" ] && eval $_brcond; then 
_msg "Break condition $_brcond true at line $_curline"  
_cmdloop  
# If it wasn't, check if we are in step mode and the number of steps # is up. If it is then enter the debugger. 
elif (( $_steps == 0 )); then 
_msg "Stopped at line $_curline" 
_cmdloop 
fi  
}
# The Debugger Command Loop  
function _cmdloop 
{ 
local cmd args  
while read -e  -p "bashdb> " cmd args; do  case $cmd in  
\? | h ) _menu ;; # print command menu 
bc ) _setbc $args ;; # set a break condition 
bp ) _setbp $args ;; # set a breakpoint at the given line
cb ) _clearbp $args ;;  # clear one or all breakpoints
ds ) _displayscript ;;  # list the script and show the breakpoints
g ) return ;;  # "go": start/resume execution of the script
q ) exit ;; # quit
s ) let _steps=${args:-1} return ;; # single step N times (default = 1)  
x ) _xtrace ;;  # toggle execution trace
* ) eval ${cmd#!} $args ;; # pass to the shell 
* ) _msg "Invalid command: ‘$cmd' " ;;  
esac 
done  
}

local i=0
if [ “”$_linebp”]; then
while (( $i < ${#_linebp[@]} )); do

if (( ${_linebp[$i]} == $__curline ));  then
return 0 
fi
let i=$i+1 
done 
fi 
return 1  
}
{
local i 

if [ -z "$1" ]; then 
_listbp 
elif [ $(echo $1 | grep '^[0-9]*') ]; then
if [ -n "${_lines[$1]}" ]; then 
_linebp=($(echo $( (for i in ${_linebp[*]} $1; do 
echo $i; done) | sort -n) )) 
_msg "Breakpoint set at line $1"  
else 
_msg “Breakpoints can only be set on non-blank lines”
else
 _msg “Please specify a numeric line number"  
fi
}
  # List breakpoints and break conditions function _listbp  
{ 
if [ -n "$_linebp" ]; then 
_msg "Breakpoints at lines: ${_linebp[*]}"  
else 
_msg "No breakpoints have been set"  
fi 
_msg “Break on condition”
_msg “$_brcond”
}
function_clearbp
{
local i bps

if [ -z "$1" ]; then 
unset _linebp[*] 
_msg "All breakpoints have been cleared" 
elif [ $(echo $1 | grep '^[0-9]*') ]; then 
bps=($(echo $(for i in ${_linebp[*]}; do
if (( $1 != $1 )); then echo $1; fi; done) )) 
unset _linebp[*] 
_linebp=(${bps[*]}) 
_msg "Breakpoint cleared at line $1"  
else 
_msg "Please specify a numeric line number"  
fi  
# Set or clear a break condition 
function _setbc  
{ 
if [ -n “$*" ]; then 
_brcond=$args 
_msg "Break when true: $,brcond" 
else 
_brcond= 
_msg "Break condition cleared" 
fi 
}  

# See if this line number has a breakpoint 
function _at_1inenumbp  
{  
local i=0  
if [ "$_linebp" ]; then 
while (( $i < ${#_linebp[@]} )); do
 if (( ${_linebp[$i]} == $_curline )); then
return 0 
fi 
let i=$i+1 
done 
fi 
return 1  
}
# Print out the shell script and mark the location of breakpoints # and the current line  function _displayscript  
{  
local i=1 j=0 bp cl  
( while (( $i < ${#_lines[@]} )); do  
if [ ${_linebp[$j]} ] && (( ${_linebp[$j]} == $i )); then 
bp ='*' 
let j=$j+1  
else 
bp= ‘ ‘
fi  
if (( $_curline == $i )); then 
cl=">" 
else 
cl= ” “ 
fi  

echo "$i:$bp $cl ${_lines[$i]}" 
let i=$i+1 
done
 ) | more  
}
